#!/bin/bash
# Author: ileler@qq.com

_getJarName() {
	JAR_NAME=

	while [ $# -gt 0 ]
		do
		case $1 in
		-jar)
				JAR_NAME=`cd \`dirname .\`; pwd`/$2
				shift;
				;;
		-d)
				CURRENT_DIR=`cd $2; pwd`
				shift;
				;;
		esac
		shift
	done
	
	if [ -z "$JAR_NAME" ]
	then
		JAR_NAME=$(ls -t $CURRENT_DIR/*.jar | head -n 1)
	fi
	echo $JAR_NAME
}

_stop() {
	JAR_NAME=`_getJarName "$@"`
	PID=`jps -ml | grep $JAR_NAME | grep -o ^[0-9]*`
	if [ -n "$PID" ]; then kill -9 $PID; fi;
	printf "\nkill [$PID]($JAR_NAME)\n"
}

_start() {
	JAR_NAME=`_getJarName "$@"`
	VM_OPTS=	
	CLEAN_FLAG=
	NO_START_FLAG=
	DEBUG_FLAG=
	DEBUG_PORT=8000
	SUSPEND=n
	ADDITIONAL_ARGS=

	while [ $# -gt 0 ]
		do
		case $1 in
		-debug)
				DEBUG_FLAG=1
				DEBUG_PORT=$2
				shift;
				;;
		-clean)
				CLEAN_FLAG=1
				;;
		-show)
				NO_START_FLAG=1
				;;
		-vmoptions)
				VM_OPTS=$2
				shift;
				;;
		-suspend)
				SUSPEND=y
				;;
		-jar)
				shift;
				;;
		-d)
				CURRENT_DIR=`cd $2; pwd`
				shift;
				;;
		*)
				ADDITIONAL_ARGS="$ADDITIONAL_ARGS $1"
				;;
		esac
		shift
	done

	if [ "$DEBUG_FLAG" ]
	then
		DEBUG_OPTS=" \
			-Xdebug \
			-Xrunjdwp:transport=dt_socket,address=$DEBUG_PORT,server=y,suspend=$SUSPEND"
	fi

	if [ "$CLEAN_FLAG" ]
	then
        rm -rf $CURRENT_DIR/nohup*
		rm -rf $CURRENT_DIR/vmlog
		rm -rf $CURRENT_DIR/logs
		rm -rf $CURRENT_DIR/tmp
	fi

	TMP_DIR=$CURRENT_DIR/tmp
	EXEC="$JAVA_HOME/bin/java \
			$JAVA_OPTS \
			$DEBUG_OPTS \
			$JMX_OPTS \
			-XX:+HeapDumpOnOutOfMemoryError \
			-XX:ErrorFile=$CURRENT_DIR/vmlog/error.log \
			-XX:HeapDumpPath=$CURRENT_DIR/vmlog/heap_dump.hprof \
			$VM_OPTS \
			-Djava.io.tmpdir=$TMP_DIR \
			-classpath $CLASSPATH \
			-jar $JAR_NAME \
			$ADDITIONAL_ARGS"
	printf "\nexec command\n \n\t[$EXEC] \n\nin \n\n\t[$CURRENT_DIR] \n\ndir.\n"
	if [ -z "$NO_START_FLAG" ]
	then
		mkdir -p $TMP_DIR
		cd $CURRENT_DIR
		nohup $EXEC >./nohup.out 2>&1 &
		tail -f ./nohup.out
	fi
}


#CURRENT_DIR=`cd \`dirname "$0"\`/; pwd`
CURRENT_DIR=`cd \`dirname .\`; pwd`

COMMAND=$1
if [ -n "$COMMAND" ]; then shift; fi;
	
if [ "$COMMAND" = "start" ]
then
	_start "$@"
elif [ "$COMMAND" = "stop" ]
then
	_stop "$@"
elif [ "$COMMAND" = "restart" ]
then
	_stop "$@"
	read -p "..." -t 3
	_start "$@"
else
	if [ -n "$COMMAND" ]
	then
		echo "Unknown command: ${COMMAND}\n"
	fi
	printf "
Usage: sbs [COMMAND] [ARGS]...
  COMMAND:
    stop\t\t  stop jar
    start\t\t  start jar
    restart\t\t  restart jar
  ARGS:
    -d\t\t\t  set work dir
    -jar\t\t  set jar file path
    -debug [port]\t  set debug model with port, port default 8000
    -vmoptions [vmopts]\t  set jvm options
    -show\t\t  show target command without exec
    -clean\t\t  clean logs,nohup.out,vmlog file or dir
    *\t\t\t  other parameters will be appended to the end of the command		
  eg:
    sh ./sbs restart -clean -vmoptions \"-Xms300m -Xmx300m\" -debug 8003 --server.port=11003
	\n"
fi

